name: check rpg
on:
    push:
        branches-ignore:
            - " ga-ignore-*"
    pull_request:
        branches-ignore:
            - " ga-ignore-*"

env:
    MIRROR_URL: git@github.com:EpitechPromo2028/B-MUL-200-LYN-2-1-myrpg-marin.lagie.git
    EXECUTABLES: "my_rpg"
    ALLOW_FUNC: "closedir fclose free getline malloc opendir pow readdir __stack_chk_fail fopen stat write"

jobs:
    check_coding_style:
        runs-on: ubuntu-latest
        container: ghcr.io/epitech/coding-style-checker:latest
        steps:
            - name: Checkout GH repository
              uses: actions/checkout@v4
              with:
                  repository: ''
            - name: Run coding-style
              run: check.sh $(pwd) $(pwd)
            - name: Check coding-style errors
              run: |
                  input=$(pwd)/coding-style-reports.log
                  awk -F':' '{print "::error title="$3" coding style error,file="$1",line="$2"::"$4}' $input
                  if [ -s $input ]; then
                      exit 1
                  fi
    check_allow_function:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout GH repository
              uses: actions/checkout@v4
              with:
                  repository: ''
            - name: Install dependencies
              run: sudo apt-get update && sudo apt-get install libcsfml-dev
            - name: Check allowed functions
              run: |
                echo "Running make"
                if [ -f Makefile ]; then
                    make -j
                    error=false
                    IFS=',' read -ra ADDR <<< "${{ env.EXECUTABLES }}"
                    for file in "${ADDR[@]}"; do
                        if [ ! -x "$file" ]; then
                            echo "::error file=${file#./},title=File does not exist or is not executable::${file#./}"
                            error=true
                        else
                            functions=$(nm $file | grep '@' | cut -d'@' -f1 | awk '{print $NF}' | grep -v '__libc_start_main' | grep -v '__cxa_finalize')
                            for func in $functions; do
                                if [[ "${{ env.ALLOW_FUNC }}" != *"$func"* ]]; then
                                    echo "::error file=${func#./},title=Bannable function::${func#./}"
                                    error=true
                                fi
                            done
                        fi
                    done
                    if $error; then
                        exit 1
                    fi
                fi
              shell: bash
    check_program_compilation:
        runs-on: ubuntu-latest
        needs:
            - check_coding_style
            - check_allow_function
        steps:
            - name: Checkout GH repo
              uses: actions/checkout@v4
              with:
                  repository: ''
            - name: Install dependencies
              run: sudo apt-get update && sudo apt-get install libcsfml-dev
            - name: Compile project
              run: |
                make -j
                make clean
              timeout-minutes: 2
            - name: Check file
              run: |
                IFS=',' read -ra ADDR <<< "${{ env.EXECUTABLES }}"
                for file in "${ADDR[@]}"; do
                    if [ ! -x "$file" ]; then
                        echo "::error file=${file#./},title=File does not exist or is not executable::${file#./}"
                        exit 1
                    fi
                done

    run_tests:
        runs-on: ubuntu-latest
        needs:  check_program_compilation
        steps:
            - name: Checkout GH repo
              uses: actions/checkout@v4
              with:
                  repository: ''
            - name: Install dependencies
              run: sudo apt-get update && sudo apt-get install libcsfml-dev
            - name: Compile tests binaries
              run: make tests_run
              timeout-minutes: 2
    push_to_mirror:
        runs-on: ubuntu-latest
        needs:  run_tests
        if: github.event_name == 'push'
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - uses: pixta-dev/repository-mirroring-action@v1.1.1
              with:
                  target_repo_url:
                      ${{ env.MIRROR_URL }}
                  ssh_private_key:
                      ${{ secrets.GIT_SSH_PRIVATE_KEY }}
